"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from .celery_schedule import CELERY_BEAT_SCHEDULE  # noqa: F401, Required for celery beat
from .envs import database_config, django_config, email_config, mailgun_config, redis_config
from .inits import init_sentry  # noqa: F401, for sentry

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "user_apps"))
sys.path.insert(0, os.path.join(BASE_DIR, "course_apps"))
sys.path.insert(0, os.path.join(BASE_DIR, "apps_for_landing_page"))
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = django_config.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = django_config.debug

ALLOWED_HOSTS = django_config.allowed_hosts

if DEBUG:
    ALLOWED_HOSTS += [
        "testserver",
        "localhost",
    ]

# Security settings
CSRF_TRUSTED_ORIGINS = django_config.cors_allowed_origins
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = django_config.cors_allowed_origins

if DEBUG:
    CORS_ALLOWED_ORIGINS += ["http://localhost:8080"]

# Application definition
INSTALLED_APPS = [
    # native apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party apps
    "corsheaders",
    "rest_framework",
    "django_celery_beat",
    "django_celery_results",
    # local apps
]

if DEBUG:
    INSTALLED_APPS += [
        "drf_spectacular",
        # "drf_spectacular_sidecar",
        # "debug_toolbar",
        # "silk",
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middlewares.Status555ExceptionMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": database_config.engine,
        "NAME": database_config.name,
        "USER": database_config.user,
        "PASSWORD": database_config.password,
        "HOST": database_config.host,
        "PORT": database_config.port,
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# AUTH_USER_MODEL = "users.User"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -----------------------------------
# CACHING
# -----------------------------------
REDIS_CACHE_URL = redis_config.cache_url  # for health check
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

# -----------------------------------
# MEDIA & STATIC
# -----------------------------------
STATIC_URL = "/api/static/"
STATIC_ROOT = BASE_DIR / "static"
MEDIA_URL = "/api/media/"
MEDIA_ROOT = BASE_DIR / "media"

# -----------------------------------
# REST FRAMEWORK
# -----------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "UPLOADED_FILES_USE_URL": True,
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # "PAGE_SIZE": 20,
}

# -----------------------------------
# JWT SETTINGS
# -----------------------------------
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=15),
    "UPDATE_LAST_LOGIN": True,
    # "TOKEN_OBTAIN_SERIALIZER": "users.serializers.CustomTokenObtainPairSerializer",
}

# -----------------------------------
# SPECTACULAR SETTINGS
# -----------------------------------
SPECTACULAR_SETTINGS = {
    "TITLE": "DC_DRF_TEMPLATE",
    "DESCRIPTION": "The platform of continuous professional development",
    "VERSION": "1.0.0",
    # "SWAGGER_UI_DIST": "SIDECAR",
    # "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    # "REDOC_DIST": "SIDECAR",
}



# -----------------------------------
# LOGGING SETTINGS
# -----------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs" / "debug.log",
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file", "mail_admins"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

# -----------------------------------
# EMAIL SETTINGS
# -----------------------------------
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = email_config.host
EMAIL_PORT = email_config.port
EMAIL_USE_TLS = email_config.use_tls
EMAIL_USE_SSL = email_config.use_ssl
EMAIL_HOST_USER = email_config.user
EMAIL_HOST_PASSWORD = email_config.password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# -----------------------------------
# CELERY CONFIG
# -----------------------------------
CELERY_BROKER_URL = redis_config.broker_url
CELERY_RESULT_BACKEND = redis_config.result_backend
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# -----------------------------------
# URLs
# -----------------------------------
FRONTEND_URL = django_config.frontend_url
SITE_URL = FRONTEND_URL
BACKEND_URL = django_config.backend_url

# Make sure directories exists
os.makedirs(BASE_DIR / "logs", exist_ok=True)
os.makedirs(BASE_DIR / "static", exist_ok=True)
os.makedirs(BASE_DIR / "media", exist_ok=True)
